name: Go API CI

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'go/**'
      - '.github/workflows/go-ci.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'go/**'
      - '.github/workflows/go-ci.yml'

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.20', '1.21', '1.22']

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go ${{ matrix.go-version }}
      uses: actions/setup-go@v6
      with:
        go-version: ${{ matrix.go-version }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('go/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-
          ${{ runner.os }}-go-

    - name: Create test database
      working-directory: go
      run: |
        # Create a small test CSV for CI
        echo "PNA,Miejscowość,Ulica,Numery,Gmina,Powiat,Województwo" > ../postal_codes_poland.csv
        echo "00-001,Warszawa,Testowa,1-10,Warszawa,Warszawa,mazowieckie" >> ../postal_codes_poland.csv
        echo "00-002,Kraków,Główna,5-15,Kraków,Kraków,małopolskie" >> ../postal_codes_poland.csv

    - name: Download dependencies
      working-directory: go
      run: go mod download

    - name: Verify dependencies
      working-directory: go
      run: go mod verify

    - name: Run go vet
      working-directory: go
      run: go vet ./...

    - name: Install staticcheck
      run: go install honnef.co/go/tools/cmd/staticcheck@latest

    - name: Run staticcheck
      working-directory: go
      run: staticcheck ./...

    - name: Install golangci-lint
      run: curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.54.2

    - name: Run golangci-lint
      working-directory: go
      run: golangci-lint run --timeout 5m

    - name: Run tests
      working-directory: go
      run: go test -v -race -coverprofile=coverage.out -covermode=atomic ./...

    - name: Generate coverage report
      working-directory: go
      run: go tool cover -html=coverage.out -o=coverage.html

    - name: Build application
      working-directory: go
      run: |
        go build -v -o postal-api ./cmd/server
        go build -v -o create-db ./cmd/create-db

    - name: Create database
      working-directory: go
      run: ./create-db

    - name: Test API endpoints
      working-directory: go
      run: |
        # Start the Go API in background
        ./postal-api &
        API_PID=$!
        
        # Wait for server to start
        sleep 3
        
        # Test health endpoint
        curl -f http://localhost:5003/health || exit 1
        
        # Test search endpoint
        curl -f "http://localhost:5003/postal-codes?city=Warszawa" || exit 1
        
        # Test specific postal code endpoint
        curl -f "http://localhost:5003/postal-codes/00-001" || exit 1
        
        # Test locations endpoints
        curl -f "http://localhost:5003/locations" || exit 1
        curl -f "http://localhost:5003/locations/provinces" || exit 1
        
        # Clean up
        kill $API_PID

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: go/coverage.out
        flags: go
        name: go-coverage
        fail_ci_if_error: false

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v6
      with:
        go-version: '1.22'

    - name: Download dependencies
      working-directory: go
      run: go mod download

    - name: Run Gosec Security Scanner
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: '-no-fail -fmt sarif -out results.sarif ./go/...'

    - name: Install govulncheck
      run: go install golang.org/x/vuln/cmd/govulncheck@latest

    - name: Run govulncheck
      working-directory: go
      run: govulncheck ./...

  performance:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v6
      with:
        go-version: '1.22'

    - name: Create test database
      working-directory: go
      run: |
        echo "PNA,Miejscowość,Ulica,Numery,Gmina,Powiat,Województwo" > ../postal_codes_poland.csv
        echo "00-001,Warszawa,Testowa,1-10,Warszawa,Warszawa,mazowieckie" >> ../postal_codes_poland.csv

    - name: Build application
      working-directory: go
      run: |
        go build -v -o postal-api ./cmd/server
        go build -v -o create-db ./cmd/create-db

    - name: Create database
      working-directory: go
      run: ./create-db

    - name: Install wrk for performance testing
      run: |
        sudo apt-get update
        sudo apt-get install -y wrk

    - name: Basic performance test
      working-directory: go
      run: |
        # Start Go API
        ./postal-api &
        API_PID=$!
        
        # Wait for server to start
        sleep 3
        
        # Run basic performance test
        wrk -t2 -c10 -d10s --timeout 10s http://127.0.0.1:5003/health
        wrk -t2 -c10 -d10s --timeout 10s "http://127.0.0.1:5003/postal-codes?city=Warszawa"
        
        # Clean up
        kill $API_PID || true

    - name: Run benchmarks
      working-directory: go
      run: |
        go test -bench=. -benchmem ./... || true

  build:
    runs-on: ubuntu-latest
    needs: [test, security]
    strategy:
      matrix:
        os: [linux, windows, darwin]
        arch: [amd64, arm64]
        exclude:
          - os: windows
            arch: arm64

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v6
      with:
        go-version: '1.22'

    - name: Download dependencies
      working-directory: go
      run: go mod download

    - name: Build for ${{ matrix.os }}/${{ matrix.arch }}
      working-directory: go
      env:
        GOOS: ${{ matrix.os }}
        GOARCH: ${{ matrix.arch }}
        CGO_ENABLED: 1
      run: |
        if [ "${{ matrix.os }}" = "linux" ]; then
          # Enable CGO for Linux builds (needed for SQLite)
          go build -v -o postal-api-${{ matrix.os }}-${{ matrix.arch }} ./cmd/server
          go build -v -o create-db-${{ matrix.os }}-${{ matrix.arch }} ./cmd/create-db
        else
          # Disable CGO for cross-compilation
          CGO_ENABLED=0 go build -v -o postal-api-${{ matrix.os }}-${{ matrix.arch }} ./cmd/server
          CGO_ENABLED=0 go build -v -o create-db-${{ matrix.os }}-${{ matrix.arch }} ./cmd/create-db
        fi

    - name: Create artifact directory
      working-directory: go
      run: |
        mkdir -p ../artifacts/go-${{ matrix.os }}-${{ matrix.arch }}
        cp -r . ../artifacts/go-${{ matrix.os }}-${{ matrix.arch }}/

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: go-app-${{ matrix.os }}-${{ matrix.arch }}
        path: artifacts/go-${{ matrix.os }}-${{ matrix.arch }}/
        retention-days: 7

  test-production:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
    - uses: actions/download-artifact@v3
      with:
        name: go-app-linux-amd64
        path: ./

    - name: Test production binary
      run: |
        chmod +x postal-api-linux-amd64 create-db-linux-amd64
        
        # Create test data
        echo "PNA,Miejscowość,Ulica,Numery,Gmina,Powiat,Województwo" > postal_codes_poland.csv
        echo "00-001,Warszawa,Testowa,1-10,Warszawa,Warszawa,mazowieckie" >> postal_codes_poland.csv
        
        # Create database
        ./create-db-linux-amd64
        
        # Start API
        ./postal-api-linux-amd64 &
        API_PID=$!
        
        # Wait and test
        sleep 3
        curl -f http://localhost:5003/health || exit 1
        
        # Clean up
        kill $API_PID